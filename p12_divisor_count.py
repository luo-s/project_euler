# Problem 12: Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over n divisors?

# def nthTriagleNumber(n):
#     return sum(range(1, n + 1))
import math
def divisibleTriangleNumber(n):
    i = 1
    tri = 0
    while True:
        tri += i
        if divisor_cnt(tri) > n:
            break
        i += 1
    return tri

def divisor_cnt(n):
    count = 0
    for i in range(1, math.isqrt(n) + 1):
        if n % i == 0:
            if i == n // i:  # If divisors are the same, count only once
                count += 1
            else:
                count += 2  # Count both divisors
    return count

def test(n, answer):
    if divisibleTriangleNumber(n) == answer:
        print(f"test case {n} Passed")
    else:
        print(f"test case {n} Failed")

test(5, 28)
test(23, 630)
test(167, 1385280)
test(374, 17907120)
test(500, 76576500)
